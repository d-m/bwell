# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2019-06-07 00:18
from __future__ import unicode_literals
import csv
import contextlib
import datetime
import logging
import os
import requests
from django.db import migrations


LOGGER = logging.getLogger(__name__)


@contextlib.contextmanager
def retrieve_data(
    url='https://data.cityofchicago.org/api/views/4ijn-s7e5/rows.csv?accessType=DOWNLOAD',
    file_name='inspection_data.csv'
):
    """Context manager to retrieve data from a URL and return it as a
    csv.DictReader object.

    This function function caches a URL to disk and then yields it as a
    csv.DictReader. By using it as a context manager, we ensure that the
    file handles are closed if there is an issue during processing.

    Parameters:
    url:         url to download. assumed to be a CSV file
    file_name:   file name to save the URL to
    """
    if not os.path.isfile(file_name):
        LOGGER.info(
            'File "%s" not found; downloading from %s' % (file_name, url)
        )
        with requests.get(url, stream=True) as request:
            with open(file_name, 'wb') as f:
                for chunk in request.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
    LOGGER.info('Opening %s' % file_name)
    data_file = open(file_name)
    csv_reader = csv.DictReader(data_file)
    yield csv_reader
    data_file.close()


def load_data(apps, schema_editor):
    """Load data into the database. The number of entries is capped to 1000 to
    keep processing time low.
    """
    Establishment = apps.get_model('health_inspections', 'Establishment')
    Inspection = apps.get_model('health_inspections', 'Inspection')
    failure_count, success_count, max_count = 0, 0, 1000
    with retrieve_data() as data:
        for index, entry in enumerate(data):
            if index >= max_count:
                break
            try:
                LOGGER.debug(entry)
                establishment, establishment_created = Establishment.objects.get_or_create(
                    license_number=entry['License #'],
                    defaults={
                        'dba_name': entry['DBA Name'],
                        'aka_name': entry['AKA Name'],
                        'risk_level': entry['Risk'],
                        'address': entry['Address'],
                        'city': entry['City'],
                        'state': entry['State'],
                        'zip_code': entry['Zip'],
                    }
                )
                LOGGER.debug(
                    '%s created: %s' % (establishment, establishment_created)
                )
                inspection, inspection_created = Inspection.objects.get_or_create(
                    inspection_id=entry['Inspection ID'],
                    defaults={
                        'inspection_date': datetime.datetime.strptime(
                            entry['Inspection Date'], '%m/%d/%Y'
                        ),
                        'inspection_type': entry['Inspection Type'],
                        'inspection_results': entry['Results'],
                        'violations': entry['Violations'],
                        'establishment': establishment
                    }
                )
                LOGGER.debug(
                    '%s created: %s' % (inspection, inspection_created)
                )
                success_count += 1
            except ValueError as e:
                LOGGER.exception(e)
                failure_count += 1
    LOGGER.info(
        'Finished. %s failures and %s successes' % (
            failure_count,
            success_count
        )
    )


class Migration(migrations.Migration):

    dependencies = [
        ('health_inspections', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(load_data),
    ]
